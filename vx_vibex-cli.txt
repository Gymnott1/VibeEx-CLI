<start of bin/vx.js>
#!/usr/bin/env node import '../src/index.js';
<end of bin/vx.js>

<start of package-lock.json>
{ "name": "vibex-cli", "version": "0.1.1", "lockfileVersion": 3, "requires": true, "packages": { "": { "name": "vibex-cli", "version": "0.1.1", "dependencies": { "@babel/parser": "^7.27.0", "@babel/traverse": "^7.27.0", "chalk": "^4.1.2", "chokidar": "^3.5.2", "commander": "^8.3.0", "css": "^3.0.0", "dotenv": "^16.5.0", "fs-extra": "^10.0.0", "glob": "^7.2.0", "glob-promise": "^6.0.7", "isbinaryfile": "^5.0.4", "node-html-parser": "^7.0.1", "parse-gitignore": "^2.0.0", "python-ast": "^0.1.0", "swift-parser": "^0.1.2" }, "bin": { "vx": "bin/vx.js" } }, "node_modules/@babel/code-frame": { "version": "7.26.2", "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz", "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==", "license": "MIT", "dependencies": { "@babel/helper-validator-identifier": "^7.25.9", "js-tokens": "^4.0.0", "picocolors": "^1.0.0" }, "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/generator": { "version": "7.27.0", "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.0.tgz", "integrity": "sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==", "license": "MIT", "dependencies": { "@babel/parser": "^7.27.0", "@babel/types": "^7.27.0", "@jridgewell/gen-mapping": "^0.3.5", "@jridgewell/trace-mapping": "^0.3.25", "jsesc": "^3.0.2" }, "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/helper-string-parser": { "version": "7.25.9", "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz", "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==", "license": "MIT", "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/helper-validator-identifier": { "version": "7.25.9", "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz", "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==", "license": "MIT", "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/parser": { "version": "7.27.0", "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.0.tgz", "integrity": "sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==", "license": "MIT", "dependencies": { "@babel/types": "^7.27.0" }, "bin": { "parser": "bin/babel-parser.js" }, "engines": { "node": ">=6.0.0" } }, "node_modules/@babel/template": { "version": "7.27.0", "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.0.tgz", "integrity": "sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==", "license": "MIT", "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/parser": "^7.27.0", "@babel/types": "^7.27.0" }, "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/traverse": { "version": "7.27.0", "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.0.tgz", "integrity": "sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==", "license": "MIT", "dependencies": { "@babel/code-frame": "^7.26.2", "@babel/generator": "^7.27.0", "@babel/parser": "^7.27.0", "@babel/template": "^7.27.0", "@babel/types": "^7.27.0", "debug": "^4.3.1", "globals": "^11.1.0" }, "engines": { "node": ">=6.9.0" } }, "node_modules/@babel/types": { "version": "7.27.0", "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.0.tgz", "integrity": "sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==", "license": "MIT", "dependencies": { "@babel/helper-string-parser": "^7.25.9", "@babel/helper-validator-identifier": "^7.25.9" }, "engines": { "node": ">=6.9.0" } }, "node_modules/@jridgewell/gen-mapping": { "version": "0.3.8", "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz", "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==", "license": "MIT", "dependencies": { "@jridgewell/set-array": "^1.2.1", "@jridgewell/sourcemap-codec": "^1.4.10", "@jridgewell/trace-mapping": "^0.3.24" }, "engines": { "node": ">=6.0.0" } }, "node_modules/@jridgewell/resolve-uri": { "version": "3.1.2", "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz", "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==", "license": "MIT", "engines": { "node": ">=6.0.0" } }, "node_modules/@jridgewell/set-array": { "version": "1.2.1", "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz", "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==", "license": "MIT", "engines": { "node": ">=6.0.0" } }, "node_modules/@jridgewell/sourcemap-codec": { "version": "1.5.0", "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz", "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==", "license": "MIT" }, "node_modules/@jridgewell/trace-mapping": { "version": "0.3.25", "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz", "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==", "license": "MIT", "dependencies": { "@jridgewell/resolve-uri": "^3.1.0", "@jridgewell/sourcemap-codec": "^1.4.14" } }, "node_modules/ansi-styles": { "version": "4.3.0", "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz", "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==", "license": "MIT", "dependencies": { "color-convert": "^2.0.1" }, "engines": { "node": ">=8" }, "funding": { "url": "https://github.com/chalk/ansi-styles?sponsor=1" } }, "node_modules/antlr4ts": { "version": "0.5.0-alpha.4", "resolved": "https://registry.npmjs.org/antlr4ts/-/antlr4ts-0.5.0-alpha.4.tgz", "integrity": "sha512-WPQDt1B74OfPv/IMS2ekXAKkTZIHl88uMetg6q3OTqgFxZ/dxDXI0EWLyZid/1Pe6hTftyg5N7gel5wNAGxXyQ==", "license": "BSD-3-Clause" }, "node_modules/anymatch": { "version": "3.1.3", "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz", "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==", "license": "ISC", "dependencies": { "normalize-path": "^3.0.0", "picomatch": "^2.0.4" }, "engines": { "node": ">= 8" } }, "node_modules/atob": { "version": "2.1.2", "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz", "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==", "license": "(MIT OR Apache-2.0)", "bin": { "atob": "bin/atob.js" }, "engines": { "node": ">= 4.5.0" } }, "node_modules/balanced-match": { "version": "1.0.2", "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz", "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==", "license": "MIT" }, "node_modules/binary-extensions": { "version": "2.3.0", "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz", "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==", "license": "MIT", "engines": { "node": ">=8" }, "funding": { "url": "https://github.com/sponsors/sindresorhus" } }, "node_modules/boolbase": { "version": "1.0.0", "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz", "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==", "license": "ISC" }, "node_modules/brace-expansion": { "version": "1.1.11", "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz", "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==", "license": "MIT", "dependencies": { "balanced-match": "^1.0.0", "concat-map": "0.0.1" } }, "node_modules/braces": { "version": "3.0.3", "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz", "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==", "license": "MIT", "dependencies": { "fill-range": "^7.1.1" }, "engines": { "node": ">=8" } }, "node_modules/bunyan": { "version": "1.2.4", "resolved": "https://registry.npmjs.org/bunyan/-/bunyan-1.2.4.tgz", "integrity": "sha512-e3kPyGJcuXy7+xdAxcOnMU9wfUVxfId0KAV9rvoqdyXHrMK4oTeBb2DHiwmOUWo/m0/W6psw1FVWf8BfGYZq4A==", "engines": [ "node >=0.8.0" ], "bin": { "bunyan": "bin/bunyan" }, "optionalDependencies": { "dtrace-provider": "~0.3 >0.3.0", "mv": "~2" } }, "node_modules/chalk": { "version": "4.1.2", "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz", "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==", "license": "MIT", "dependencies": { "ansi-styles": "^4.1.0", "supports-color": "^7.1.0" }, "engines": { "node": ">=10" }, "funding": { "url": "https://github.com/chalk/chalk?sponsor=1" } }, "node_modules/chokidar": { "version": "3.6.0", "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz", "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==", "license": "MIT", "dependencies": { "anymatch": "~3.1.2", "braces": "~3.0.2", "glob-parent": "~5.1.2", "is-binary-path": "~2.1.0", "is-glob": "~4.0.1", "normalize-path": "~3.0.0", "readdirp": "~3.6.0" }, "engines": { "node": ">= 8.10.0" }, "funding": { "url": "https://paulmillr.com/funding/" }, "optionalDependencies": { "fsevents": "~2.3.2" } }, "node_modules/color-convert": { "version": "2.0.1", "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz", "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==", "license": "MIT", "dependencies": { "color-name": "~1.1.4" }, "engines": { "node": ">=7.0.0" } }, "node_modules/color-name": { "version": "1.1.4", "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz", "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==", "license": "MIT" }, "node_modules/commander": { "version": "8.3.0", "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz", "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==", "license": "MIT", "engines": { "node": ">= 12" } }, "node_modules/concat-map": { "version": "0.0.1", "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz", "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==", "license": "MIT" }, "node_modules/css": { "version": "3.0.0", "resolved": "https://registry.npmjs.org/css/-/css-3.0.0.tgz", "integrity": "sha512-DG9pFfwOrzc+hawpmqX/dHYHJG+Bsdb0klhyi1sDneOgGOXy9wQIC8hzyVp1e4NRYDBdxcylvywPkkXCHAzTyQ==", "license": "MIT", "dependencies": { "inherits": "^2.0.4", "source-map": "^0.6.1", "source-map-resolve": "^0.6.0" } }, "node_modules/css-select": { "version": "5.1.0", "resolved": "https://registry.npmjs.org/css-select/-/css-select-5.1.0.tgz", "integrity": "sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==", "license": "BSD-2-Clause", "dependencies": { "boolbase": "^1.0.0", "css-what": "^6.1.0", "domhandler": "^5.0.2", "domutils": "^3.0.1", "nth-check": "^2.0.1" }, "funding": { "url": "https://github.com/sponsors/fb55" } }, "node_modules/css-what": { "version": "6.1.0", "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz", "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==", "license": "BSD-2-Clause", "engines": { "node": ">= 6" }, "funding": { "url": "https://github.com/sponsors/fb55" } }, "node_modules/debug": { "version": "4.4.0", "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz", "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==", "license": "MIT", "dependencies": { "ms": "^2.1.3" }, "engines": { "node": ">=6.0" }, "peerDependenciesMeta": { "supports-color": { "optional": true } } }, "node_modules/decode-uri-component": { "version": "0.2.2", "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.2.tgz", "integrity": "sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==", "license": "MIT", "engines": { "node": ">=0.10" } }, "node_modules/dom-serializer": { "version": "2.0.0", "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz", "integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==", "license": "MIT", "dependencies": { "domelementtype": "^2.3.0", "domhandler": "^5.0.2", "entities": "^4.2.0" }, "funding": { "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1" } }, "node_modules/domelementtype": { "version": "2.3.0", "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz", "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==", "funding": [ { "type": "github", "url": "https://github.com/sponsors/fb55" } ], "license": "BSD-2-Clause" }, "node_modules/domhandler": { "version": "5.0.3", "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz", "integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==", "license": "BSD-2-Clause", "dependencies": { "domelementtype": "^2.3.0" }, "engines": { "node": ">= 4" }, "funding": { "url": "https://github.com/fb55/domhandler?sponsor=1" } }, "node_modules/domutils": { "version": "3.2.2", "resolved": "https://registry.npmjs.org/domutils/-/domutils-3.2.2.tgz", "integrity": "sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==", "license": "BSD-2-Clause", "dependencies": { "dom-serializer": "^2.0.0", "domelementtype": "^2.3.0", "domhandler": "^5.0.3" }, "funding": { "url": "https://github.com/fb55/domutils?sponsor=1" } }, "node_modules/dotenv": { "version": "16.5.0", "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz", "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==", "license": "BSD-2-Clause", "engines": { "node": ">=12" }, "funding": { "url": "https://dotenvx.com" } }, "node_modules/dtrace-provider": { "version": "0.3.2", "resolved": "https://registry.npmjs.org/dtrace-provider/-/dtrace-provider-0.3.2.tgz", "integrity": "sha512-jcLPy5/ZTbvM7qfCA8WOV4dD8KGiz8DvELvU1bmxq+wd2gRC87GIEXDVN6bXa6u0HAanCnXNjpimrAk+uuqjCA==", "hasInstallScript": true, "optional": true, "dependencies": { "nan": "~1.3.0" }, "engines": { "node": ">=0.6" } }, "node_modules/entities": { "version": "4.5.0", "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz", "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==", "license": "BSD-2-Clause", "engines": { "node": ">=0.12" }, "funding": { "url": "https://github.com/fb55/entities?sponsor=1" } }, "node_modules/fill-range": { "version": "7.1.1", "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz", "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==", "license": "MIT", "dependencies": { "to-regex-range": "^5.0.1" }, "engines": { "node": ">=8" } }, "node_modules/fs-extra": { "version": "10.1.0", "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz", "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==", "license": "MIT", "dependencies": { "graceful-fs": "^4.2.0", "jsonfile": "^6.0.1", "universalify": "^2.0.0" }, "engines": { "node": ">=12" } }, "node_modules/fs.realpath": { "version": "1.0.0", "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz", "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==", "license": "ISC" }, "node_modules/fsevents": { "version": "2.3.3", "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz", "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==", "hasInstallScript": true, "license": "MIT", "optional": true, "os": [ "darwin" ], "engines": { "node": "^8.16.0 || ^10.6.0 || >=11.0.0" } }, "node_modules/glob": { "version": "7.2.3", "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz", "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==", "deprecated": "Glob versions prior to v9 are no longer supported", "license": "ISC", "dependencies": { "fs.realpath": "^1.0.0", "inflight": "^1.0.4", "inherits": "2", "minimatch": "^3.1.1", "once": "^1.3.0", "path-is-absolute": "^1.0.0" }, "engines": { "node": "*" }, "funding": { "url": "https://github.com/sponsors/isaacs" } }, "node_modules/glob-parent": { "version": "5.1.2", "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz", "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==", "license": "ISC", "dependencies": { "is-glob": "^4.0.1" }, "engines": { "node": ">= 6" } }, "node_modules/glob-promise": { "version": "6.0.7", "resolved": "https://registry.npmjs.org/glob-promise/-/glob-promise-6.0.7.tgz", "integrity": "sha512-DEAe6br1w8ZF+y6KM2pzgdfhpreladtNvyNNVgSkxxkFWzXTJFXxQrJQQbAnc7kL0EUd7w5cR8u4K0P4+/q+Gw==", "license": "MIT", "engines": { "node": ">=16" }, "funding": { "type": "individual", "url": "https://github.com/sponsors/ahmadnassri" }, "peerDependencies": { "glob": "^8.0.3" } }, "node_modules/globals": { "version": "11.12.0", "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz", "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==", "license": "MIT", "engines": { "node": ">=4" } }, "node_modules/graceful-fs": { "version": "4.2.11", "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz", "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==", "license": "ISC" }, "node_modules/has-flag": { "version": "4.0.0", "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz", "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==", "license": "MIT", "engines": { "node": ">=8" } }, "node_modules/he": { "version": "1.2.0", "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz", "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==", "license": "MIT", "bin": { "he": "bin/he" } }, "node_modules/inflight": { "version": "1.0.6", "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz", "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==", "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.", "license": "ISC", "dependencies": { "once": "^1.3.0", "wrappy": "1" } }, "node_modules/inherits": { "version": "2.0.4", "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz", "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==", "license": "ISC" }, "node_modules/is-binary-path": { "version": "2.1.0", "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz", "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==", "license": "MIT", "dependencies": { "binary-extensions": "^2.0.0" }, "engines": { "node": ">=8" } }, "node_modules/is-extglob": { "version": "2.1.1", "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz", "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==", "license": "MIT", "engines": { "node": ">=0.10.0" } }, "node_modules/is-glob": { "version": "4.0.3", "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz", "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==", "license": "MIT", "dependencies": { "is-extglob": "^2.1.1" }, "engines": { "node": ">=0.10.0" } }, "node_modules/is-number": { "version": "7.0.0", "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz", "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==", "license": "MIT", "engines": { "node": ">=0.12.0" } }, "node_modules/isbinaryfile": { "version": "5.0.4", "resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-5.0.4.tgz", "integrity": "sha512-YKBKVkKhty7s8rxddb40oOkuP0NbaeXrQvLin6QMHL7Ypiy2RW9LwOVrVgZRyOrhQlayMd9t+D8yDy8MKFTSDQ==", "license": "MIT", "engines": { "node": ">= 18.0.0" }, "funding": { "url": "https://github.com/sponsors/gjtorikian/" } }, "node_modules/js-tokens": { "version": "4.0.0", "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz", "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==", "license": "MIT" }, "node_modules/jsesc": { "version": "3.1.0", "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz", "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==", "license": "MIT", "bin": { "jsesc": "bin/jsesc" }, "engines": { "node": ">=6" } }, "node_modules/jsonfile": { "version": "6.1.0", "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz", "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==", "license": "MIT", "dependencies": { "universalify": "^2.0.0" }, "optionalDependencies": { "graceful-fs": "^4.1.6" } }, "node_modules/lugg": { "version": "1.0.0", "resolved": "https://registry.npmjs.org/lugg/-/lugg-1.0.0.tgz", "integrity": "sha512-EA+qUoFUG5Q4Wnf5fAfSOoGmzF74RhSn/I5+6az5KBq+L1GnM3gtZiUcMJR28r8LGPS4ZceZ93JK1E85Hs/wGg==", "license": "MIT", "dependencies": { "bunyan": "^1.0.1" } }, "node_modules/minimatch": { "version": "3.1.2", "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz", "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==", "license": "ISC", "dependencies": { "brace-expansion": "^1.1.7" }, "engines": { "node": "*" } }, "node_modules/minimist": { "version": "1.2.8", "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz", "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==", "license": "MIT", "optional": true, "funding": { "url": "https://github.com/sponsors/ljharb" } }, "node_modules/mkdirp": { "version": "0.5.6", "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz", "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==", "license": "MIT", "optional": true, "dependencies": { "minimist": "^1.2.6" }, "bin": { "mkdirp": "bin/cmd.js" } }, "node_modules/ms": { "version": "2.1.3", "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz", "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==", "license": "MIT" }, "node_modules/mv": { "version": "2.1.1", "resolved": "https://registry.npmjs.org/mv/-/mv-2.1.1.tgz", "integrity": "sha512-at/ZndSy3xEGJ8i0ygALh8ru9qy7gWW1cmkaqBN29JmMlIvM//MEO9y1sk/avxuwnPcfhkejkLsuPxH81BrkSg==", "license": "MIT", "optional": true, "dependencies": { "mkdirp": "~0.5.1", "ncp": "~2.0.0", "rimraf": "~2.4.0" }, "engines": { "node": ">=0.8.0" } }, "node_modules/nan": { "version": "1.3.0", "resolved": "https://registry.npmjs.org/nan/-/nan-1.3.0.tgz", "integrity": "sha512-2xPpifjI6OzUZtboDKhRlk9u98eV395Twdp0i0GnwP9PLGpphm4R7Q0wIZXmgmu31ukqUJCg1uXlD44fph/sKg==", "license": "MIT", "optional": true }, "node_modules/ncp": { "version": "2.0.0", "resolved": "https://registry.npmjs.org/ncp/-/ncp-2.0.0.tgz", "integrity": "sha512-zIdGUrPRFTUELUvr3Gmc7KZ2Sw/h1PiVM0Af/oHB6zgnV1ikqSfRk+TOufi79aHYCW3NiOXmr1BP5nWbzojLaA==", "license": "MIT", "optional": true, "bin": { "ncp": "bin/ncp" } }, "node_modules/node-html-parser": { "version": "7.0.1", "resolved": "https://registry.npmjs.org/node-html-parser/-/node-html-parser-7.0.1.tgz", "integrity": "sha512-KGtmPY2kS0thCWGK0VuPyOS+pBKhhe8gXztzA2ilAOhbUbxa9homF1bOyKvhGzMLXUoRds9IOmr/v5lr/lqNmA==", "license": "MIT", "dependencies": { "css-select": "^5.1.0", "he": "1.2.0" } }, "node_modules/normalize-path": { "version": "3.0.0", "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz", "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==", "license": "MIT", "engines": { "node": ">=0.10.0" } }, "node_modules/nth-check": { "version": "2.1.1", "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz", "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==", "license": "BSD-2-Clause", "dependencies": { "boolbase": "^1.0.0" }, "funding": { "url": "https://github.com/fb55/nth-check?sponsor=1" } }, "node_modules/once": { "version": "1.4.0", "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz", "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==", "license": "ISC", "dependencies": { "wrappy": "1" } }, "node_modules/parse-gitignore": { "version": "2.0.0", "resolved": "https://registry.npmjs.org/parse-gitignore/-/parse-gitignore-2.0.0.tgz", "integrity": "sha512-RmVuCHWsfu0QPNW+mraxh/xjQVw/lhUCUru8Zni3Ctq3AoMhpDTq0OVdKS6iesd6Kqb7viCV3isAL43dciOSog==", "license": "MIT", "engines": { "node": ">=14" } }, "node_modules/path-is-absolute": { "version": "1.0.1", "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz", "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==", "license": "MIT", "engines": { "node": ">=0.10.0" } }, "node_modules/picocolors": { "version": "1.1.1", "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz", "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==", "license": "ISC" }, "node_modules/picomatch": { "version": "2.3.1", "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz", "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==", "license": "MIT", "engines": { "node": ">=8.6" }, "funding": { "url": "https://github.com/sponsors/jonschlinkert" } }, "node_modules/python-ast": { "version": "0.1.0", "resolved": "https://registry.npmjs.org/python-ast/-/python-ast-0.1.0.tgz", "integrity": "sha512-uMPE7HRMfsbHtQYPg/+EH9MJkynLfLr+0VJbeBgJHpt2wuDgf5hZrEczOIGNFKaO0W1HWiL7bSxA/EOOo70mIQ==", "license": "MIT", "dependencies": { "antlr4ts": "^0.5.0-alpha.3" } }, "node_modules/readdirp": { "version": "3.6.0", "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz", "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==", "license": "MIT", "dependencies": { "picomatch": "^2.2.1" }, "engines": { "node": ">=8.10.0" } }, "node_modules/rimraf": { "version": "2.4.5", "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.4.5.tgz", "integrity": "sha512-J5xnxTyqaiw06JjMftq7L9ouA448dw/E7dKghkP9WpKNuwmARNNg+Gk8/u5ryb9N/Yo2+z3MCwuqFK/+qPOPfQ==", "deprecated": "Rimraf versions prior to v4 are no longer supported", "license": "ISC", "optional": true, "dependencies": { "glob": "^6.0.1" }, "bin": { "rimraf": "bin.js" } }, "node_modules/rimraf/node_modules/glob": { "version": "6.0.4", "resolved": "https://registry.npmjs.org/glob/-/glob-6.0.4.tgz", "integrity": "sha512-MKZeRNyYZAVVVG1oZeLaWie1uweH40m9AZwIwxyPbTSX4hHrVYSzLg0Ro5Z5R7XKkIX+Cc6oD1rqeDJnwsB8/A==", "deprecated": "Glob versions prior to v9 are no longer supported", "license": "ISC", "optional": true, "dependencies": { "inflight": "^1.0.4", "inherits": "2", "minimatch": "2 || 3", "once": "^1.3.0", "path-is-absolute": "^1.0.0" }, "engines": { "node": "*" } }, "node_modules/source-map": { "version": "0.6.1", "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz", "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==", "license": "BSD-3-Clause", "engines": { "node": ">=0.10.0" } }, "node_modules/source-map-resolve": { "version": "0.6.0", "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.6.0.tgz", "integrity": "sha512-KXBr9d/fO/bWo97NXsPIAW1bFSBOuCnjbNTBMO7N59hsv5i9yzRDfcYwwt0l04+VqnKC+EwzvJZIP/qkuMgR/w==", "deprecated": "See https://github.com/lydell/source-map-resolve#deprecated", "license": "MIT", "dependencies": { "atob": "^2.1.2", "decode-uri-component": "^0.2.0" } }, "node_modules/supports-color": { "version": "7.2.0", "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz", "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==", "license": "MIT", "dependencies": { "has-flag": "^4.0.0" }, "engines": { "node": ">=8" } }, "node_modules/swift-parser": { "version": "0.1.2", "resolved": "https://registry.npmjs.org/swift-parser/-/swift-parser-0.1.2.tgz", "integrity": "sha512-vU72jn8FIIs3UxVrIkN+2pkFKk2pdwdW3su3zJOBryWDQr7HHGW25lOFgl0yL9WUBRImijrP1a89Q0/I+sqfjA==", "license": "MIT", "dependencies": { "bunyan": "~1.2.1", "lugg": "~1.0.0", "xregexp": "~2.0.0" } }, "node_modules/to-regex-range": { "version": "5.0.1", "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz", "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==", "license": "MIT", "dependencies": { "is-number": "^7.0.0" }, "engines": { "node": ">=8.0" } }, "node_modules/universalify": { "version": "2.0.1", "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz", "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==", "license": "MIT", "engines": { "node": ">= 10.0.0" } }, "node_modules/wrappy": { "version": "1.0.2", "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz", "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==", "license": "ISC" }, "node_modules/xregexp": { "version": "2.0.0", "resolved": "https://registry.npmjs.org/xregexp/-/xregexp-2.0.0.tgz", "integrity": "sha512-xl/50/Cf32VsGq/1R8jJE5ajH1yMCQkpmoS10QbFZWl2Oor4H0Me64Pu2yxvsRWK3m6soJbmGfzSR7BYmDcWAA==", "license": "MIT", "engines": { "node": "*" } } } }
<end of package-lock.json>

<start of package.json>
{ "name": "vibex-cli", "version": "0.1.1", "description": "VibEx CLI for preparing code for AI analysis", "type": "module", "main": "src/index.js", "bin": { "vx": "./bin/vx.js" }, "scripts": { "test": "echo \"Error: no test specified\" && exit 1" }, "dependencies": { "@babel/parser": "^7.27.0", "@babel/traverse": "^7.27.0", "chalk": "^4.1.2", "chokidar": "^3.5.2", "commander": "^8.3.0", "css": "^3.0.0", "dotenv": "^16.5.0", "fs-extra": "^10.0.0", "glob": "^7.2.0", "glob-promise": "^6.0.7", "isbinaryfile": "^5.0.4", "node-html-parser": "^7.0.1", "parse-gitignore": "^2.0.0", "python-ast": "^0.1.0", "swift-parser": "^0.1.2" } }
<end of package.json>

<start of README.md>
# VibEx CLI [![npm version](https://img.shields.io/npm/v/vibex-cli.svg)](https://www.npmjs.com/package/vibex-cli) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) VibEx (`vx`) is a developer-friendly CLI tool that streamlines the process of working with AI coding assistants. It helps developers prepare, consolidate, and clean code for AI analysis without exposing sensitive information. ![vibex-cli](images/vibex-cli.jpg) ## 🚀 Features - **Combine multiple files** into a single document for AI analysis - **Remove comments** to reduce token usage and noise - **Scrub sensitive information** like API keys and personal data - **Monitor files** for changes and auto-update the combined output - **Character trimming** to include only specific parts of files - **Character cutting** to exclude specific parts of files - **Support for many file types** with varying levels of processing - **Highly configurable** with simple command line options ## 📦 Installation ```bash npm install -g vibex-cli ``` ## 🔧 Usage ### Basic Commands ```bash # Combine all files in current directory vx c # Combine specific files vx c -f app.js config.js # Combine files but exclude some vx c -x node_modules/ .env # Remove comments from combined output vx c --rc # Remove sensitive information vx c --rp # Combine both options vx c --rc --rp # Monitor files for changes vx c -mx ``` ### Output By default, VibEx creates a file named `vx_{folder_name}.txt` in the current directory containing the combined and processed content. ## 🛠️ Command Options | Command | Alias | Description | |---------|-------|-------------| | `c` | `--combine` | Combine files for AI analysis | | `-f <files...>` | `--files <files...>` | Specify files to include | | `-s` | `--separate` | Keep files visually separated in output | | `-x <files...>` | `--exclude <files...>` | Files or directories to exclude | | `--rc` | `--remove-comments` | Remove code comments | | `--rp` | `--remove-private` | Remove private/sensitive information | | `-mx` | `--monitor` | Monitor files for changes and update output | | `--trim <ranges...>` | | Only include characters in specified ranges | | `--cut <ranges...>` | | Exclude characters in specified ranges | | `--force` | | Force inclusion of sensitive folders | ## ✨ Examples ### Combining Multiple JavaScript Files ```bash vx c -f src/app.js src/utils.js src/api.js ``` Creates a file `vx_app.js.txt` containing the combined contents of all three files. ### Preparing Code for AI Review Without Sensitive Info ```bash vx c --rc --rp ``` Combines all files in the current directory, removes comments, and scrubs sensitive information. ### Setting Up Automatic Updates for a Project ```bash vx c -mx ``` Creates a combined file that automatically updates when any source file changes. ### Working with Specific Files While Excluding Others ```bash vx c -f src/ -x src/tests/ src/deprecated/ ``` Combines all files in the `src/` directory except those in the `tests/` and `deprecated/` subdirectories. ### Including Only Specific Parts of Files ```bash vx c -f large-file.js --trim="s-200" --trim="500-e" ``` Combines only the first 200 characters and from position 500 to the end of the file. ### Excluding Specific Parts of Files ```bash vx c -f app.js --cut="300-500" ``` Combines the file while excluding characters from position 300 to 500. ## 🔍 Advanced Features ### Character Range Trimming The `--trim` option allows you to specify character ranges to include in the output: ```bash # Include only characters 100-500 vx c -f app.js --trim="100-500" # Include from start to position 200 vx c -f app.js --trim="s-200" # Include from position 500 to end vx c -f app.js --trim="500-e" # Include multiple ranges vx c -f app.js --trim="s-200" --trim="500-e" ``` ### Character Range Cutting The `--cut` option allows you to specify character ranges to exclude from the output: ```bash # Exclude characters 100-500 vx c -f app.js --cut="100-500" # Exclude from start to position 100 vx c -f app.js --cut="s-100" # Exclude from position 500 to end vx c -f app.js --cut="500-e" # Exclude multiple ranges vx c -f app.js --cut="100-200" --cut="400-500" ``` ### Combining Trim and Cut You can combine trim and cut operations for precise control: ```bash vx c -f app.js --trim="s-1000" --cut="200-300" ``` This includes only the first 1000 characters but excludes the characters from 200-300. ## 📊 File Type Support VibEx supports various file types with different levels of processing: ### Full Support JavaScript, TypeScript, Python, HTML, CSS, Markdown, JSON, and more. ### Partial Support Ruby, Go, Swift, Kotlin, Java, C/C++, PHP, Rust, Shell scripts, and more. ### Basic Support Plain text, CSV, INI, configuration files, environment variables, and more. ## 🔒 Privacy Protection The `--rp` flag identifies and replaces these patterns: - API keys → `"API_KEY"` - Authentication tokens → `"AUTH_TOKEN"` - Email addresses → `"example@email.com"` - Phone numbers → `"+123456789"` - Numeric codes → `"11111"` - Personal names → `"FIRST_NAME"` ## 💬 Comment Removal The `--rc` flag removes comments from many languages including: - JavaScript/TypeScript (`//`, `/*...*/`) - Python (`#`, docstrings) - HTML/XML (`<!-- -->`) - CSS (`/*...*/) - Shell scripts (`#`) - Ruby (`#`, `=begin...=end`) - And many more ## 🔄 Monitoring Changes The monitoring feature (`-mx`) watches for file changes in real-time: ```bash vx c -f src/ -mx ``` When any monitored file changes, VibEx automatically updates the combined output file. ## 🤝 Contributing Contributions are welcome! Check out our [Contributing Guide](CONTRIBUTING.md) for details on: 1. Fork the repository 2. Create your feature branch (`git checkout -b feature/amazing-feature`) 3. Commit your changes (`git commit -m 'Add some amazing feature'`) 4. Push to the branch (`git push origin feature/amazing-feature`) 5. Open a Pull Request ### Areas for Contribution - Additional language support for comment removal - Better regex patterns for identifying sensitive information - Performance improvements for large codebases - Support for additional file formats - Integration with development tools and platforms - Adding support for handling images and media files ## 📄 License This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. ## 🙏 Acknowledgments - Inspired by the challenges developers face when working with AI coding assistants - Built with open-source tools and community support --- 📣 **Found VibEx helpful?** Star us on GitHub and share your experience! 💡 **Have ideas for improvements?** Open an issue or submit a pull request!
<end of README.md>

<start of src/characterTrim.js>
function processCharacterRanges(content, options) { let result = content; if (options.trim && options.trim.length > 0) { const contentArray = [...content]; let newContent = []; for (const range of options.trim) { const [start, end] = parseRange(range, content.length); if (start !== null && end !== null) { newContent.push(...contentArray.slice(start, end + 1)); } } result = newContent.join(''); } if (options.cut && options.cut.length > 0) { const contentArray = [...result]; let newContent = [...contentArray]; for (const range of options.cut.sort((a, b) => { const [aStart] = parseRange(a, result.length); const [bStart] = parseRange(b, result.length); return bStart - aStart; })) { const [start, end] = parseRange(range, result.length); if (start !== null && end !== null) { newContent.splice(start, end - start + 1); } } result = newContent.join(''); } return result; } function parseRange(rangeStr, contentLength) { const cleanRange = rangeStr.replace(/['"()]/g, ''); const match = cleanRange.match(/^(s|\*|\d+)-(e|\*|\d+)$/); if (!match) return [null, null]; let [_, startStr, endStr] = match; const start = startStr === '*' || startStr === 's' ? 0 : parseInt(startStr, 10); const end = endStr === '*' || endStr === 'e' ? contentLength - 1 : parseInt(endStr, 10); if (isNaN(start) || isNaN(end) || start < 0 || end >= contentLength || start > end) { console.warn(`Invalid range: ${cleanRange} (converted to ${start}-${end}, content length: ${contentLength})`); return [null, null]; } return [start, end]; } function extractCharacterRangeOptions(options) { const result = { trim: [], cut: [] }; if (options.trim) { const trimRanges = Array.isArray(options.trim) ? options.trim : [options.trim]; result.trim = trimRanges; } if (options.cut) { const cutRanges = Array.isArray(options.cut) ? options.cut : [options.cut]; result.cut = cutRanges; } return result; } export { processCharacterRanges, extractCharacterRangeOptions };
<end of src/characterTrim.js>

<start of src/commentRemover.js>
function removeComments(content, fileExtension) { switch (fileExtension) { case '.js': case '.ts': return content.replace(/\/\/.*|\/\*[\s\S]*?\*\ case '.py': return content.replace(/#.*|""".*?"""|\'\'\'.*?\'\'\'/gs, ''); case '.html': case '.xml': return content.replace(/<!--.*?-->/gs, ''); case '.css': return content.replace(/\/\*[\s\S]*?\*\ case '.sh': return content.replace(/#.*/g, ''); case '.rb': return content.replace(/#.*|=begin.*=end/gs, ''); default: return content; } } export { removeComments };
<end of src/commentRemover.js>

<start of src/fileProcessor.js>
import fs from 'fs-extra'; import path from 'path'; import { removeComments } from './commentRemover.js'; import { scrubSensitiveInfo } from './privacyFilter.js'; import { processCharacterRanges, extractCharacterRangeOptions } from './characterTrim.js'; import { findFilesToProcess } from './utils.js'; import chokidar from 'chokidar'; import chalk from 'chalk'; async function processFiles(options) { const filesToProcess = await findFilesToProcess(options, ['node_modulesvx_*.txt'], true); if (filesToProcess.length === 0) { console.log(chalk.yellow('No suitable text files found to combine.')); return; } const { default: chalk } = await import('chalk'); console.log(chalk.blue(`Combining ${filesToProcess.length} file(s)...`)); const rangeOptions = extractCharacterRangeOptions(options); let combinedContent = ''; let updateNeeded = false; const buildCombinedContent = async () => { let tempCombinedContent = ''; for (const file of filesToProcess) { try { const content = await fs.readFile(file, 'utf-8'); let processedContent = content; if (rangeOptions.trim.length > 0 || rangeOptions.cut.length > 0) { processedContent = processCharacterRanges(processedContent, rangeOptions); } if (options.rc) { processedContent = removeComments(processedContent, path.extname(file)); } if (options.rp) { processedContent = scrubSensitiveInfo(processedContent); } processedContent = processedContent.replace(/\s+/g, ' ').trim(); const startMarker = `<start of ${file}>`; const endMarker = `<end of ${file}>`; tempCombinedContent += `\n${startMarker}\n${processedContent}\n${endMarker}\n`; } catch (error) { console.error(chalk.red(`Error reading file ${file}, skipping: ${error.message}`)); } } return tempCombinedContent.trim(); }; combinedContent = await buildCombinedContent(); const outputFileNameBase = (options.files && options.files.length > 0 && filesToProcess.length > 0) ? path.basename(filesToProcess[0]).split('.')[0] : path.basename(process.cwd()); const outputFileName = `vx_${outputFileNameBase}.txt`; const outputFile = path.join(process.cwd(), outputFileName); await fs.writeFile(outputFile, combinedContent); console.log(chalk.green(`Combined content written to ${outputFile}`)); if (options.monitor) { console.log(chalk.blue(`Monitoring files for changes... Press Ctrl+C to stop.`)); const watcher = chokidar.watch(filesToProcess); let updateTimeout; const debounceTime = 500; watcher.on('change', (filePath) => { console.log(chalk.yellow(`Change detected in ${filePath}. Rebuilding output...`)); clearTimeout(updateTimeout); updateTimeout = setTimeout(async () => { try { combinedContent = await buildCombinedContent(); await fs.writeFile(outputFile, combinedContent); console.log(chalk.green(`Updated ${outputFile}`)); } catch (error) { console.error(chalk.red(`Error updating ${outputFile}: ${error.message}`)); } }, debounceTime); }); watcher.on('error', error => console.error(chalk.red(`Watcher error: ${error}`))); } } export { processFiles };
<end of src/fileProcessor.js>

<start of src/fileSupport.js>
import path from 'path'; import fs from 'fs-extra'; import chalk from 'chalk'; const fileTypeSupport = { fullSupport: [ '.js', '.jsx', '.ts', '.tsx', '.py', '.html', '.htm', '.css', '.scss', '.md', '.json', ], partialSupport: [ '.rb', '.go', '.swift', '.kt', '.kts', '.java', '.c', '.cpp', '.h', '.hpp', '.php', '.rs', '.sh', '.bash', '.xml', '.svg', '.yaml', '.yml', '.sql', '.less', ], basicSupport: [ '.txt', '.csv', '.ini', '.conf', '.toml', '.env', '.gitignore', '.dockerignore', '.ps1', '.pl', '.pm', '.r', '.elm', '.lua', '.dart', '.ex', '.exs', '.hs', '.fs', '.fsx', ], categories: { 'frontend': ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.less', '.svg'], 'backend': ['.js', '.ts', '.py', '.rb', '.go', '.java', '.php', '.cs', '.rs'], 'config': ['.json', '.yaml', '.yml', '.toml', '.ini', '.conf', '.env'], 'documentation': ['.md', '.txt', '.rst', '.adoc'], 'data': ['.json', '.csv', '.xml', '.yaml', '.yml'], 'script': ['.sh', '.bash', '.ps1', '.bat', '.cmd'] }, hasFullSupport(extension) { return this.fullSupport.includes(extension.toLowerCase()); }, hasPartialSupport(extension) { return this.partialSupport.includes(extension.toLowerCase()); }, isSupported(extension) { extension = extension.toLowerCase(); return this.fullSupport.includes(extension) || this.partialSupport.includes(extension) || this.basicSupport.includes(extension); }, getSupportLevel(extension) { extension = extension.toLowerCase(); if (this.fullSupport.includes(extension)) return 'full'; if (this.partialSupport.includes(extension)) return 'partial'; if (this.basicSupport.includes(extension)) return 'basic'; return 'unsupported'; } }; function getFileCategory(extension) { extension = extension.toLowerCase(); for (const [category, extensions] of Object.entries(fileTypeSupport.categories)) { if (extensions.includes(extension)) { return category; } } return 'other'; } async function isBinaryFile(filePath) { try { if (!(await fs.pathExists(filePath)) || !(await fs.stat(filePath)).isFile()) { return true; } const { isBinaryFile: checkIsBinary } = await import('isbinaryfile'); if (typeof checkIsBinary !== 'function') { throw new Error('"isbinaryfile" did not export a function named "isBinaryFile"'); } return await checkIsBinary(filePath); } catch (error) { if (error.code === 'ERR_MODULE_NOT_FOUND' && error.message.includes('isbinaryfile')) { console.warn(chalk.yellow(`Warning: Optional package 'isbinaryfile' not found. Falling back to extension check for ${filePath}. Run 'npm install isbinaryfile' for better accuracy.`)); } else { console.warn(chalk.yellow(`Warning: 'isbinaryfile' check failed for ${filePath}. Falling back to extension check. Error: ${error.message}`)); } const binaryExtensions = [ '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.ico', '.tif', '.tiff', '.pdf', '.doc', '.docx', '.ppt', '.pptx', '.xls', '.xlsx', '.zip', '.tar', '.gz', '.7z', '.rar', '.exe', '.dll', '.so', '.dylib', '.app', '.mp3', '.mp4', '.avi', '.mov', '.wav', '.ogg', '.flac', '.webm', '.ttf', '.otf', '.woff', '.woff2', '.iso', '.img', '.dmg', '.pyc', '.pyo', '.class', '.jar', '.swf' ]; const extension = path.extname(filePath).toLowerCase(); return binaryExtensions.includes(extension); } } function getParserOptions(extension) { extension = extension.toLowerCase(); const defaultOptions = { removeComments: true, preserveDocstrings: false }; const languageOptions = { '.js': { parser: 'babel', plugins: ['jsx'] }, '.jsx': { parser: 'babel', plugins: ['jsx'] }, '.ts': { parser: 'typescript' }, '.tsx': { parser: 'typescript', plugins: ['jsx'] }, '.py': { parser: 'python', keepDocstrings: true }, '.html': { parser: 'html' }, '.css': { parser: 'css' }, '.scss': { parser: 'scss' }, '.md': { parser: 'markdown' }, '.json': { parser: 'json' }, '.rb': { parser: 'ruby' }, '.go': { parser: 'go' }, '.swift': { parser: 'swift' }, '.kt': { parser: 'kotlin' }, '.java': { parser: 'java' }, '.php': { parser: 'php' } }; return { ...defaultOptions, ...(languageOptions[extension] || {}) }; } export { fileTypeSupport, getFileCategory, isBinaryFile, getParserOptions };
<end of src/fileSupport.js>

<start of src/helpFunctions.js>
import chalk from 'chalk'; function showCommandHelp(command) { switch (command) { case 'combine': case 'c': showCombineHelp(); break; case 'remove-comments': case 'rcm': showRemoveCommentsHelp(); break; case 'trim': showTrimHelp(); break; case 'cut': showCutHelp(); break; default: console.log(`No detailed help available for '${command}'. Use 'vx --help' for general help.`); } } function showCombineHelp() { console.log(chalk.bold.green('\nVibEx CLI: Combine Command') + '\n'); console.log(chalk.bold('DESCRIPTION')); console.log(' The combine command merges multiple files into a single output file for AI analysis.\n'); console.log(chalk.bold('USAGE')); console.log(' vx combine [options]'); console.log(' vx c [options]\n'); console.log(chalk.bold('OPTIONS')); console.log(' ' + chalk.yellow('-f, --files <files...>') + ' Specify files to include'); console.log(' Example: vx c -f index.js utils.js app.css\n'); console.log(' ' + chalk.yellow('-s, --separate') + ' Keep files visually separated in the output'); console.log(' Example: vx c -f *.js -s\n'); console.log(' ' + chalk.yellow('-x, --exclude <files...>') + ' Patterns of files to exclude'); console.log(' Example: vx c -x node_modules function showTrimHelp() { console.log(chalk.bold.green('\nVibEx CLI: Character Trimming Help') + '\n'); console.log(chalk.bold('DESCRIPTION')); console.log(' Character trimming allows you to include only specific parts of files.\n'); console.log(chalk.bold('USAGE')); console.log(' Use the --trim option with the combine command:\n'); console.log(' vx c -f [files] --trim="start-end" [--trim="start-end" ...]\n'); console.log(chalk.bold('RANGE FORMAT')); console.log(' Ranges are specified as "start-end" where:'); console.log(' - start and end are character positions (0-based)'); console.log(' - "s" can be used to represent the start of the file'); console.log(' - "e" can be used to represent the end of the file\n'); console.log(chalk.bold('EXAMPLES')); console.log(' # Include only the first 200 characters'); console.log(' vx c -f app.js --trim="s-200"\n'); console.log(' # Include only characters from position 500 to the end'); console.log(' vx c -f app.js --trim="500-e"\n'); console.log(' # Include two separate ranges'); console.log(' vx c -f app.js --trim="s-200" --trim="500-700"\n'); console.log(' # Include specific function (assuming you know its character range)'); console.log(' vx c -f app.js --trim="1050-1500"\n'); console.log(chalk.bold('TIPS')); console.log(' - Always use quotes around range values to avoid shell interpretation issues'); console.log(' - You can combine multiple --trim options to include several ranges'); console.log(' - Character positions are 0-based (first character is at position 0)'); console.log(' - To find character positions, you can use text editors with position display\n'); } function showRemoveCommentsHelp() { console.log(chalk.bold.green('\nVibEx CLI: Remove Comments Command') + '\n'); console.log(chalk.bold('DESCRIPTION')); console.log(' This command finds supported source code files and removes comments from them.'); console.log(chalk.red(' It modifies the files directly in place. Use with caution!\n')); console.log(chalk.bold('USAGE')); console.log(' vx remove-comments [options]'); console.log(' vx rcm [options]\n'); console.log(chalk.bold('OPTIONS')); console.log(' ' + chalk.yellow('-f, --files <files...> ') + 'Specify specific files or glob patterns to process.'); console.log(' Example: `vx rcm -f src/app.js src/utils__tests__dist*.ts"\n'); console.log(' # Remove comments from all supported files, but skip the vendor directory'); console.log(' vx rcm -x "vendor function showCutHelp() { console.log(chalk.bold.green('\nVibEx CLI: Character Cutting Help') + '\n'); console.log(chalk.bold('DESCRIPTION')); console.log(' Character cutting allows you to exclude specific parts of files.\n'); console.log(chalk.bold('USAGE')); console.log(' Use the --cut option with the combine command:\n'); console.log(' vx c -f [files] --cut="start-end" [--cut="start-end" ...]\n'); console.log(chalk.bold('RANGE FORMAT')); console.log(' Ranges are specified as "start-end" where:'); console.log(' - start and end are character positions (0-based)'); console.log(' - "s" can be used to represent the start of the file'); console.log(' - "e" can be used to represent the end of the file\n'); console.log(chalk.bold('EXAMPLES')); console.log(' # Exclude characters from position 200 to 500'); console.log(' vx c -f app.js --cut="200-500"\n'); console.log(' # Exclude the beginning of the file up to position 100'); console.log(' vx c -f app.js --cut="s-100"\n'); console.log(' # Exclude multiple ranges'); console.log(' vx c -f app.js --cut="100-200" --cut="500-600"\n'); console.log(' # Exclude a specific function (assuming you know its character range)'); console.log(' vx c -f app.js --cut="1050-1500"\n'); console.log(chalk.bold('COMBINING WITH TRIM')); console.log(' You can combine --cut and --trim options for precise control:'); console.log(' vx c -f app.js --trim="s-500" --cut="200-300"\n'); console.log(chalk.bold('TIPS')); console.log(' - Always use quotes around range values to avoid shell interpretation issues'); console.log(' - You can combine multiple --cut options to exclude several ranges'); console.log(' - Cut operations are processed after trim operations'); console.log(' - Character positions are 0-based (first character is at position 0)'); console.log(' - To find character positions, you can use text editors with position display\n'); } export { showCommandHelp, showCombineHelp, showTrimHelp, showCutHelp, showRemoveCommentsHelp };
<end of src/helpFunctions.js>

<start of src/index.js>
import { program } from 'commander'; import { processFiles } from './fileProcessor.js'; import chalk from 'chalk'; import { removeCommentsInFiles } from './removeCommentsProcessor.js'; import { showCommandHelp, showCombineHelp, showRemoveCommentsHelp } from './helpFunctions.js'; function displayBanner() { const boxWidth = 80; const border = '┌' + '─'.repeat(boxWidth - 2) + '┐'; const emptyLine = '│' + ' '.repeat(boxWidth - 2) + '│'; const closingBorder = '└' + '─'.repeat(boxWidth - 2) + '┘'; console.log('\n' + chalk.cyan(border)); console.log(chalk.cyan(emptyLine)); const title = ' VibEx CLI '; const titleLine = '│' + ' '.repeat(Math.floor((boxWidth - 2 - title.length) / 2)) + chalk.bold.green(title) + ' '.repeat(Math.ceil((boxWidth - 2 - title.length) / 2)) + '│'; console.log(chalk.cyan(titleLine)); console.log(chalk.cyan(emptyLine)); const description = 'A powerful tool for preparing code for AI analysis'; const descLine = '│' + ' '.repeat(Math.floor((boxWidth - 2 - description.length) / 2)) + chalk.white(description) + ' '.repeat(Math.ceil((boxWidth - 2 - description.length) / 2)) + '│'; console.log(chalk.cyan(descLine)); console.log(chalk.cyan(emptyLine)); const features = [ '• Combine multiple code files into a single document', '• Remove comments and sensitive information', '• Include or exclude specific character ranges', '• Monitor files for changes in real-time' ]; features.forEach(feature => { const featureLine = '│ ' + chalk.yellow(feature) + ' '.repeat(boxWidth - 4 - feature.length) + '│'; console.log(chalk.cyan(featureLine)); }); console.log(chalk.cyan(emptyLine)); const developer = 'Developed by: Linus Wabwire (@gymnott)'; const devLine = '│ ' + chalk.white(developer) + ' '.repeat(boxWidth - 4 - developer.length) + '│'; console.log(chalk.cyan(devLine)); const github = 'GitHub: https: const githubLine = '│ ' + chalk.white(github) + ' '.repeat(boxWidth - 4 - github.length) + '│'; console.log(chalk.cyan(githubLine)); console.log(chalk.cyan(emptyLine)); console.log(chalk.cyan(closingBorder)); console.log('\n' + chalk.green('Type `vx --help` for usage information') + '\n'); } function displayHelp() { console.log(chalk.bold.green('\nVibEx CLI') + ' - Prepare code for AI analysis\n'); console.log(chalk.bold('VERSION')); console.log(' 0.1.0\n'); console.log(chalk.bold('USAGE')); console.log(' vx [command] [options]\n'); console.log(chalk.bold('COMMANDS')); console.log(' ' + chalk.yellow('combine, c') + ' Combine files for AI analysis\n'); console.log(' ' + chalk.yellow('remove-comments, rcm') + ' Remove comments from files in place\n'); console.log(chalk.bold('OPTIONS FOR COMBINE COMMAND')); console.log(' ' + chalk.yellow('-f, --files <files...>') + ' Specify files to include'); console.log(' ' + chalk.yellow('-s, --separate') + ' Keep files visually separated'); console.log(' ' + chalk.yellow('-x, --exclude <files...>') + ' Files to exclude'); console.log(' ' + chalk.yellow('--rc') + ' Remove comments'); console.log(' ' + chalk.yellow('--rp') + ' Remove private information'); console.log(' ' + chalk.yellow('-mx, --monitor') + ' Monitor files for changes'); console.log(' ' + chalk.yellow('--force') + ' Force inclusion of sensitive folders'); console.log(' ' + chalk.yellow('--trim <ranges...>') + ' Only include characters in specified ranges'); console.log(' ' + chalk.yellow('--cut <ranges...>') + ' Exclude characters in specified ranges\n'); console.log(chalk.bold('OPTIONS FOR REMOVE-COMMENTS COMMAND')); console.log(' ' + chalk.yellow('-f, --files <files...>') + ' Specify files/patterns to process (default: all supported files)'); console.log(' ' + chalk.yellow('-x, --exclude <files...>') + ' Files/patterns to exclude'); console.log(' ' + chalk.yellow('--force') + ' Force processing in normally excluded directories\n'); console.log(chalk.bold('DETAILED HELP')); console.log(' For detailed help on specific features:'); console.log(' vx --help-command combine # Detailed help for combine command'); console.log(' vx --help-command remove-comments # Detailed help for comment removal'); console.log(' vx --help-command trim # Detailed help for character trimming'); console.log(' vx --help-command cut # Detailed help for character cutting\n'); console.log(chalk.bold('EXAMPLES')); console.log(' vx c -f index.js utils.js # Combine specific files'); console.log(' vx c -f *.js -x node_modules*.py -x venv/**\n'); console.log(chalk.bold.red('WARNING: This command modifies files IN PLACE. Ensure you have backups or use version control.\n')); }); const parsedProgram = program.parse(process.argv); const options = parsedProgram.opts(); if (options.helpCommand) { displayBanner(); showCommandHelp(options.helpCommand); process.exit(0); } if (!parsedProgram.args.length && process.argv.length > 2 && !options.helpCommand) { console.error(chalk.red('Error: Please specify a command (e.g., "combine", "remove-comments").')); console.log('\nRun ' + chalk.green('vx --help') + ' to see available commands.'); process.exit(1); } else if (process.argv.length <= 2) { displayBanner(); displayHelp(); process.exit(0); }
<end of src/index.js>

<start of src/privacyFilter.js>
function scrubSensitiveInfo(content) { content = content.replace(/[A-Za-z0-9_-]{20,}/g, 'API_KEY'); content = content.replace(/\b\d{3}[-.]?\d{2}[-.]?\d{4}\b/g, '+123456789'); content = content.replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b/g, 'example@gmail.com'); content = content.replace(/\b\d{5}-\d{4}|\d{3}-\d{2}-\d{4}\b/g, '11111'); content = content.replace(/\b[A-Z][a-z]+(?: [A-Z][a-z]+)*\b/g, 'FIRST_NAME'); return content; } export { scrubSensitiveInfo };
<end of src/privacyFilter.js>

<start of src/removeCommentsProcessor.js>
import fs from 'fs-extra'; import path from 'path'; import { removeComments } from './commentRemover.js'; import { findFilesToProcess } from './utils.js'; import chalk from 'chalk'; async function removeCommentsInFiles(options) { console.log(chalk.blue('Starting comment removal process...')); const files = await findFilesToProcess(options, ['node_modulesvx_*.txt'], true); if (files.length === 0) { console.log(chalk.yellow('No suitable text files found to process.')); return; } console.log(chalk.blue(`Processing ${files.length} file(s):`)); let filesModified = 0; let filesUnchanged = 0; let filesErrored = 0; for (const file of files) { try { const originalContent = await fs.readFile(file, 'utf-8'); const fileExtension = path.extname(file); const contentWithoutComments = removeComments(originalContent, fileExtension); if (originalContent !== contentWithoutComments) { await fs.writeFile(file, contentWithoutComments, 'utf-8'); console.log(chalk.green(`Removed comments from: ${file}`)); filesModified++; } else { filesUnchanged++; } } catch (error) { console.error(chalk.red(`Error processing file ${file}:`), error.message); filesErrored++; } } console.log(chalk.blue('\nComment removal process finished.')); if (filesModified > 0) console.log(chalk.green(` Files modified: ${filesModified}`)); if (filesUnchanged > 0) console.log(chalk.gray(` Files unchanged/no comments: ${filesUnchanged}`)); if (filesErrored > 0) { console.log(chalk.red(` Files with errors: ${filesErrored}`)); } } export { removeCommentsInFiles };
<end of src/removeCommentsProcessor.js>

<start of src/utils.js>
import fs from 'fs-extra'; import path from 'path'; import glob from 'glob'; import { isBinaryFile } from './fileSupport.js'; import chalk from 'chalk'; import { fileTypeSupport } from './fileSupport.js'; async function findFilesToProcess(options, defaultExcludes = ['node_modulesvx_*.txt'], useDefaultGlob = true) { let filesToProcess = []; if (options.files && options.files.length > 0) { const patterns = Array.isArray(options.files) ? options.files : [options.files]; const foundFiles = patterns.flatMap(pattern => glob.sync(pattern, { nodir: true, dot: true })); filesToProcess = [...new Set(foundFiles)]; } else if (useDefaultGlob) { const supportedExtensions = [ ...fileTypeSupport.fullSupport, ...fileTypeSupport.partialSupport, ...fileTypeSupport.basicSupport ].map(ext => ext.substring(1)); const globPattern = `**/*.{${supportedExtensions.join(',')}}`; const excludePatterns = options.force ? options.exclude || [] : [...defaultExcludes, ...(options.exclude || [])]; filesToProcess = glob.sync(globPattern, { ignore: excludePatterns, nodir: true, dot: true }) .filter(file => !path.basename(file).startsWith('vx_')); } if (options.exclude && options.exclude.length > 0) { const excludePatterns = Array.isArray(options.exclude) ? options.exclude : [options.exclude]; const micromatch = (await import('micromatch')).default; filesToProcess = filesToProcess.filter(file => !micromatch.isMatch(file, excludePatterns)); } const textFiles = []; for (const file of filesToProcess) { try { if (await fs.pathExists(file) && (await fs.stat(file)).isFile()) { if (!(await isBinaryFile(file))) { textFiles.push(file); } else { console.log(chalk.yellow(`Skipping binary file: ${file}`)); } } } catch (err) { console.warn(chalk.yellow(`Could not stat file ${file}, skipping. Error: ${err.message}`)); } } return textFiles; } export { findFilesToProcess };
<end of src/utils.js>